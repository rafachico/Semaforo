// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/06/2020 22:50:30"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    semaforo
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module semaforo_vlg_sample_tst(
	clk,
	sd,
	se,
	sampler_tx
);
input  clk;
input  sd;
input  se;
output sampler_tx;

reg sample;
time current_time;
always @(clk or sd or se)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module semaforo_vlg_check_tst (
	sema,
	semb,
	teste,
	sampler_rx
);
input  sema;
input  semb;
input [31:0] teste;
input sampler_rx;

reg  sema_expected;
reg  semb_expected;
reg [31:0] teste_expected;

reg  sema_prev;
reg  semb_prev;
reg [31:0] teste_prev;

reg  sema_expected_prev;
reg  semb_expected_prev;
reg [31:0] teste_expected_prev;

reg  last_sema_exp;
reg  last_semb_exp;
reg [31:0] last_teste_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	sema_prev = sema;
	semb_prev = semb;
	teste_prev = teste;
end

// update expected /o prevs

always @(trigger)
begin
	sema_expected_prev = sema_expected;
	semb_expected_prev = semb_expected;
	teste_expected_prev = teste_expected;
end



// expected sema
initial
begin
	sema_expected = 1'bX;
end 

// expected semb
initial
begin
	semb_expected = 1'bX;
end 
// expected teste[ 31 ]
initial
begin
	teste_expected[31] = 1'bX;
end 
// expected teste[ 30 ]
initial
begin
	teste_expected[30] = 1'bX;
end 
// expected teste[ 29 ]
initial
begin
	teste_expected[29] = 1'bX;
end 
// expected teste[ 28 ]
initial
begin
	teste_expected[28] = 1'bX;
end 
// expected teste[ 27 ]
initial
begin
	teste_expected[27] = 1'bX;
end 
// expected teste[ 26 ]
initial
begin
	teste_expected[26] = 1'bX;
end 
// expected teste[ 25 ]
initial
begin
	teste_expected[25] = 1'bX;
end 
// expected teste[ 24 ]
initial
begin
	teste_expected[24] = 1'bX;
end 
// expected teste[ 23 ]
initial
begin
	teste_expected[23] = 1'bX;
end 
// expected teste[ 22 ]
initial
begin
	teste_expected[22] = 1'bX;
end 
// expected teste[ 21 ]
initial
begin
	teste_expected[21] = 1'bX;
end 
// expected teste[ 20 ]
initial
begin
	teste_expected[20] = 1'bX;
end 
// expected teste[ 19 ]
initial
begin
	teste_expected[19] = 1'bX;
end 
// expected teste[ 18 ]
initial
begin
	teste_expected[18] = 1'bX;
end 
// expected teste[ 17 ]
initial
begin
	teste_expected[17] = 1'bX;
end 
// expected teste[ 16 ]
initial
begin
	teste_expected[16] = 1'bX;
end 
// expected teste[ 15 ]
initial
begin
	teste_expected[15] = 1'bX;
end 
// expected teste[ 14 ]
initial
begin
	teste_expected[14] = 1'bX;
end 
// expected teste[ 13 ]
initial
begin
	teste_expected[13] = 1'bX;
end 
// expected teste[ 12 ]
initial
begin
	teste_expected[12] = 1'bX;
end 
// expected teste[ 11 ]
initial
begin
	teste_expected[11] = 1'bX;
end 
// expected teste[ 10 ]
initial
begin
	teste_expected[10] = 1'bX;
end 
// expected teste[ 9 ]
initial
begin
	teste_expected[9] = 1'bX;
end 
// expected teste[ 8 ]
initial
begin
	teste_expected[8] = 1'bX;
end 
// expected teste[ 7 ]
initial
begin
	teste_expected[7] = 1'bX;
end 
// expected teste[ 6 ]
initial
begin
	teste_expected[6] = 1'bX;
end 
// expected teste[ 5 ]
initial
begin
	teste_expected[5] = 1'bX;
end 
// expected teste[ 4 ]
initial
begin
	teste_expected[4] = 1'bX;
end 
// expected teste[ 3 ]
initial
begin
	teste_expected[3] = 1'bX;
end 
// expected teste[ 2 ]
initial
begin
	teste_expected[2] = 1'bX;
end 
// expected teste[ 1 ]
initial
begin
	teste_expected[1] = 1'bX;
end 
// expected teste[ 0 ]
initial
begin
	teste_expected[0] = 1'bX;
end 
// generate trigger
always @(sema_expected or sema or semb_expected or semb or teste_expected or teste)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected sema = %b | expected semb = %b | expected teste = %b | ",sema_expected_prev,semb_expected_prev,teste_expected_prev);
	$display("| real sema = %b | real semb = %b | real teste = %b | ",sema_prev,semb_prev,teste_prev);
`endif
	if (
		( sema_expected_prev !== 1'bx ) && ( sema_prev !== sema_expected_prev )
		&& ((sema_expected_prev !== last_sema_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sema :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sema_expected_prev);
		$display ("     Real value = %b", sema_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_sema_exp = sema_expected_prev;
	end
	if (
		( semb_expected_prev !== 1'bx ) && ( semb_prev !== semb_expected_prev )
		&& ((semb_expected_prev !== last_semb_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port semb :: @time = %t",  $realtime);
		$display ("     Expected value = %b", semb_expected_prev);
		$display ("     Real value = %b", semb_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_semb_exp = semb_expected_prev;
	end
	if (
		( teste_expected_prev[0] !== 1'bx ) && ( teste_prev[0] !== teste_expected_prev[0] )
		&& ((teste_expected_prev[0] !== last_teste_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[0] = teste_expected_prev[0];
	end
	if (
		( teste_expected_prev[1] !== 1'bx ) && ( teste_prev[1] !== teste_expected_prev[1] )
		&& ((teste_expected_prev[1] !== last_teste_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[1] = teste_expected_prev[1];
	end
	if (
		( teste_expected_prev[2] !== 1'bx ) && ( teste_prev[2] !== teste_expected_prev[2] )
		&& ((teste_expected_prev[2] !== last_teste_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[2] = teste_expected_prev[2];
	end
	if (
		( teste_expected_prev[3] !== 1'bx ) && ( teste_prev[3] !== teste_expected_prev[3] )
		&& ((teste_expected_prev[3] !== last_teste_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[3] = teste_expected_prev[3];
	end
	if (
		( teste_expected_prev[4] !== 1'bx ) && ( teste_prev[4] !== teste_expected_prev[4] )
		&& ((teste_expected_prev[4] !== last_teste_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[4] = teste_expected_prev[4];
	end
	if (
		( teste_expected_prev[5] !== 1'bx ) && ( teste_prev[5] !== teste_expected_prev[5] )
		&& ((teste_expected_prev[5] !== last_teste_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[5] = teste_expected_prev[5];
	end
	if (
		( teste_expected_prev[6] !== 1'bx ) && ( teste_prev[6] !== teste_expected_prev[6] )
		&& ((teste_expected_prev[6] !== last_teste_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[6] = teste_expected_prev[6];
	end
	if (
		( teste_expected_prev[7] !== 1'bx ) && ( teste_prev[7] !== teste_expected_prev[7] )
		&& ((teste_expected_prev[7] !== last_teste_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[7] = teste_expected_prev[7];
	end
	if (
		( teste_expected_prev[8] !== 1'bx ) && ( teste_prev[8] !== teste_expected_prev[8] )
		&& ((teste_expected_prev[8] !== last_teste_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[8] = teste_expected_prev[8];
	end
	if (
		( teste_expected_prev[9] !== 1'bx ) && ( teste_prev[9] !== teste_expected_prev[9] )
		&& ((teste_expected_prev[9] !== last_teste_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[9] = teste_expected_prev[9];
	end
	if (
		( teste_expected_prev[10] !== 1'bx ) && ( teste_prev[10] !== teste_expected_prev[10] )
		&& ((teste_expected_prev[10] !== last_teste_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[10] = teste_expected_prev[10];
	end
	if (
		( teste_expected_prev[11] !== 1'bx ) && ( teste_prev[11] !== teste_expected_prev[11] )
		&& ((teste_expected_prev[11] !== last_teste_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[11] = teste_expected_prev[11];
	end
	if (
		( teste_expected_prev[12] !== 1'bx ) && ( teste_prev[12] !== teste_expected_prev[12] )
		&& ((teste_expected_prev[12] !== last_teste_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[12] = teste_expected_prev[12];
	end
	if (
		( teste_expected_prev[13] !== 1'bx ) && ( teste_prev[13] !== teste_expected_prev[13] )
		&& ((teste_expected_prev[13] !== last_teste_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[13] = teste_expected_prev[13];
	end
	if (
		( teste_expected_prev[14] !== 1'bx ) && ( teste_prev[14] !== teste_expected_prev[14] )
		&& ((teste_expected_prev[14] !== last_teste_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[14] = teste_expected_prev[14];
	end
	if (
		( teste_expected_prev[15] !== 1'bx ) && ( teste_prev[15] !== teste_expected_prev[15] )
		&& ((teste_expected_prev[15] !== last_teste_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[15] = teste_expected_prev[15];
	end
	if (
		( teste_expected_prev[16] !== 1'bx ) && ( teste_prev[16] !== teste_expected_prev[16] )
		&& ((teste_expected_prev[16] !== last_teste_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[16] = teste_expected_prev[16];
	end
	if (
		( teste_expected_prev[17] !== 1'bx ) && ( teste_prev[17] !== teste_expected_prev[17] )
		&& ((teste_expected_prev[17] !== last_teste_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[17] = teste_expected_prev[17];
	end
	if (
		( teste_expected_prev[18] !== 1'bx ) && ( teste_prev[18] !== teste_expected_prev[18] )
		&& ((teste_expected_prev[18] !== last_teste_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[18] = teste_expected_prev[18];
	end
	if (
		( teste_expected_prev[19] !== 1'bx ) && ( teste_prev[19] !== teste_expected_prev[19] )
		&& ((teste_expected_prev[19] !== last_teste_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[19] = teste_expected_prev[19];
	end
	if (
		( teste_expected_prev[20] !== 1'bx ) && ( teste_prev[20] !== teste_expected_prev[20] )
		&& ((teste_expected_prev[20] !== last_teste_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[20] = teste_expected_prev[20];
	end
	if (
		( teste_expected_prev[21] !== 1'bx ) && ( teste_prev[21] !== teste_expected_prev[21] )
		&& ((teste_expected_prev[21] !== last_teste_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[21] = teste_expected_prev[21];
	end
	if (
		( teste_expected_prev[22] !== 1'bx ) && ( teste_prev[22] !== teste_expected_prev[22] )
		&& ((teste_expected_prev[22] !== last_teste_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[22] = teste_expected_prev[22];
	end
	if (
		( teste_expected_prev[23] !== 1'bx ) && ( teste_prev[23] !== teste_expected_prev[23] )
		&& ((teste_expected_prev[23] !== last_teste_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[23] = teste_expected_prev[23];
	end
	if (
		( teste_expected_prev[24] !== 1'bx ) && ( teste_prev[24] !== teste_expected_prev[24] )
		&& ((teste_expected_prev[24] !== last_teste_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[24] = teste_expected_prev[24];
	end
	if (
		( teste_expected_prev[25] !== 1'bx ) && ( teste_prev[25] !== teste_expected_prev[25] )
		&& ((teste_expected_prev[25] !== last_teste_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[25] = teste_expected_prev[25];
	end
	if (
		( teste_expected_prev[26] !== 1'bx ) && ( teste_prev[26] !== teste_expected_prev[26] )
		&& ((teste_expected_prev[26] !== last_teste_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[26] = teste_expected_prev[26];
	end
	if (
		( teste_expected_prev[27] !== 1'bx ) && ( teste_prev[27] !== teste_expected_prev[27] )
		&& ((teste_expected_prev[27] !== last_teste_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[27] = teste_expected_prev[27];
	end
	if (
		( teste_expected_prev[28] !== 1'bx ) && ( teste_prev[28] !== teste_expected_prev[28] )
		&& ((teste_expected_prev[28] !== last_teste_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[28] = teste_expected_prev[28];
	end
	if (
		( teste_expected_prev[29] !== 1'bx ) && ( teste_prev[29] !== teste_expected_prev[29] )
		&& ((teste_expected_prev[29] !== last_teste_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[29] = teste_expected_prev[29];
	end
	if (
		( teste_expected_prev[30] !== 1'bx ) && ( teste_prev[30] !== teste_expected_prev[30] )
		&& ((teste_expected_prev[30] !== last_teste_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[30] = teste_expected_prev[30];
	end
	if (
		( teste_expected_prev[31] !== 1'bx ) && ( teste_prev[31] !== teste_expected_prev[31] )
		&& ((teste_expected_prev[31] !== last_teste_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port teste[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", teste_expected_prev);
		$display ("     Real value = %b", teste_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_teste_exp[31] = teste_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module semaforo_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg sd;
reg se;
// wires                                               
wire sema;
wire semb;
wire [31:0] teste;

wire sampler;                             

// assign statements (if any)                          
semaforo i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.sd(sd),
	.se(se),
	.sema(sema),
	.semb(semb),
	.teste(teste)
);

// clk
always
begin
	clk = 1'b0;
	clk = #1250 1'b1;
	#1250;
end 

// sd
initial
begin
	sd = 1'b0;
	sd = #20000 1'b1;
	sd = #10000 1'b0;
end 

// se
initial
begin
	se = 1'b0;
end 

semaforo_vlg_sample_tst tb_sample (
	.clk(clk),
	.sd(sd),
	.se(se),
	.sampler_tx(sampler)
);

semaforo_vlg_check_tst tb_out(
	.sema(sema),
	.semb(semb),
	.teste(teste),
	.sampler_rx(sampler)
);
endmodule

